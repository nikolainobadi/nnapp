//
//  OpenTests.swift
//  nnapp
//
//  Created by Nikolai Nobadi on 3/29/25.
//

import Testing
@testable import nnapp

struct OpenTests {
    @Test("Throws error when can't find Project with shortcut")
    func throwsErrorWhenCannotFindProjectWithShortcut() {
        // TODO: -
    }
    
    @Test("Throws error when using Group shortcut and can't find Group with shortcut")
    func throwsErrorWhenUsingGroupShortcutCannotFindGroup() {
        // TODO: -
    }
}


// MARK: - IDE Tests
extension OpenTests {
    @Test("Throws error when selected Project folder doesn't exist and has no remote repo")
    func throwsErrorWhenSelectedProjectMissingAndNoRepo() {
        // TODO: -
    }
    
    @Test("Throws error when selected Project folder doesn't exist and user does not want to clone")
    func throwsErrorWhenSelectedProjectMissingUserRejectsCloning() {
        // TODO: -
    }
    
    @Test("Clones missing project")
    func clonesMissingProject() throws {
        // TODO: -
    }
    
    @Test("Does not clone Project with remote repo when it exists locally")
    func doesNotCloneProjectThatExistsLocally() throws {
        // TODO: -
    }
    
    @Test("Opens new terminal window when one is not already open at Project path")
    func opensNewTerminalWindowAtProjectPath() throws {
        // TODO: -
    }
    
    @Test("Does not open new terminal window when one is already open at Project path")
    func doesNotOpenTerminalWindowIfOneAlreadyIsOpen() throws {
        // TODO: -
    }
    
    @Test("Opens Project in Xcode")
    func opensProjectInXcode() throws {
        // TODO: -
    }
    
    @Test("Opens Project in VSCode")
    func opensProjectInVSCode() throws {
        // TODO: -
    }
}


// MARK: - Remote Tests
extension OpenTests {
    @Test("Throws error when trying to open remote repo if Project doesn't have one")
    func throwsErrorWhenOpeningRepoForProjectWithoutOne() {
        // TODO: -
    }
    
    @Test("Open remote repo website for Project")
    func opensRemoteRepo() throws {
        // TODO: -
    }
}


// MARK: - OtherLink Tests
extension OpenTests {
    @Test("Throws error when trying to open ProjectLink for Project without any links")
    func throwsErrorWhenOpeningLinkForProjectWithoutLinks() {
        // TODO: -
    }
    
    @Test("Throws error when trying to open ProjectLink for Project and cannot find link")
    func throwsErrorWjenOpeningLinkForProjectAndCannotFindLinke() {
        // TODO: -
    }
    
    @Test("Opens ProjectLink for Project")
    func opensProjectLink() throws {
        // TODO: -
    }
}


// MARK: - Factory
private extension OpenTests {
    
}


// MARK: - RunCommand
private extension OpenTests {
    func runCommand(_ factory: MockContextFactory, shortcut: String? = nil, launchType: LaunchType = .xcode, useGroupShortcut: Bool = false) throws {
        var args = ["open", "-\(launchType.argChar)"]
        
        if useGroupShortcut {
            args.append("-g")
        }
        
        if let shortcut {
            args.append(shortcut)
        }
        
        try Nnapp.testRun(contextFactory: factory, args: args)
    }
}
